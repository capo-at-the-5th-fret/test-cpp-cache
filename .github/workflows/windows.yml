name: Continuous Integration
on:
  push:
    branches: [ "main", "fix*" ]
  pull_request:
    branches: [ "main", "fix*" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  SCCACHE_GHA_ENABLED: "true"
        
jobs:
  Test:
    name: ${{ matrix.config.os }} ${{ matrix.config.compiler }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: "ubuntu-24.04", compiler: "gcc", cmake_gen: "Ninja Multi-Config", cmake_cxx: "/usr/bin/g++-14", cmake_cxx_launcher: "ccache" }
          - { os: "ubuntu-24.04", compiler: "llvm", cmake_gen: Ninja Multi-Config, cmake_cxx: "/usr/lib/llvm-18/bin/clang++", cmake_cxx_launcher: "ccache" }
          - { os: "macos-14", compiler: "gcc", cmake_gen: "Ninja Multi-Config", cmake_cxx: "/opt/homebrew/bin/g++-14", cmake_cxx_launcher: "ccache" }
          # NOTE: Won't compile; llvm not supported on arm?
          #- { os: "macos-14", compiler: "llvm", cmake_gen: "Ninja Multi-Config", cmake_cxx: "/usr/lib/llvm-18/bin/clang++", cmake_cxx_launcher: "ccache" }
          - { os: windows-2022, compiler: "msvc", cmake_gen: "Ninja Multi-Config", cmake_cxx: "cl", cmake_cxx_launcher: "sccache" }
          - { os: windows-2022, compiler: "llvm", cmake_gen: "Ninja Multi-Config", cmake_cxx: "clang++", cmake_cxx_launcher: "sccache" }
          - { os: windows-2022, compiler: "gcc", cmake_gen: "Ninja Multi-Config", cmake_cxx: "g++", cmake_cxx_launcher: "sccache" }

    steps:
      - uses: actions/checkout@v4

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ./build
          key: ${{ runner.os }}-${{ matrix.config.compiler }}-${{ env.BUILD_TYPE }}-${{ hashFiles('**/CMakeLists.txt', './vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.config.compiler }}-${{ env.BUILD_TYPE }}-

      # - name: Cache (Windows)
      #   if: runner.os == 'Windows'
      #   uses: mozilla-actions/sccache-action@v0.0.6

      # - name: Cache (non-Windows)
      #   if: runner.os != 'Windows'
      #   uses: hendrikmuhs/ccache-action@v1.2

      - name: Install C++ Tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: ${{ runner.os == 'Windows' && matrix.config.compiler == 'msvc' }}
          ninja: true

      # -DCMAKE_CXX_COMPILER_LAUNCHER="${{matrix.config.cmake_cxx_launcher}}"
      - name: Configure CMake
        run: cmake -B ./build -G "${{matrix.config.cmake_gen}}" -DCMAKE_CXX_COMPILER="${{matrix.config.cmake_cxx}}"
    
      - name: Build
        run: cmake --build ./build --config ${{env.BUILD_TYPE}}
    
      - name: Test
        working-directory: ./build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}
